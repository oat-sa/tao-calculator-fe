// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tokenizer iterator iterates over the terms from the expression " 3+4 *$foo + sinh 1" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": "3",
    "toString": [Function],
    "type": "NUM3",
    "value": "3",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "+",
    "toString": [Function],
    "type": "POS",
    "value": "+",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 3,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 6,
    "line": 1,
    "lineBreaks": 0,
    "offset": 5,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 7,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": "$foo + sinh 1",
    "toString": [Function],
    "type": "syntaxError",
    "value": "$foo + sinh 1",
  },
]
`;

exports[`tokenizer iterator iterates over the terms from the expression " 3+4 *$foo + sinh PI" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": "3",
    "toString": [Function],
    "type": "NUM3",
    "value": "3",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "+",
    "toString": [Function],
    "type": "POS",
    "value": "+",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 3,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 6,
    "line": 1,
    "lineBreaks": 0,
    "offset": 5,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 7,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": "$",
    "toString": [Function],
    "type": "DOLLAR",
    "value": "$",
  },
  {
    "col": 8,
    "line": 1,
    "lineBreaks": 0,
    "offset": 7,
    "text": "foo",
    "toString": [Function],
    "type": "FOO",
    "value": "foo",
  },
  {
    "col": 12,
    "line": 1,
    "lineBreaks": 0,
    "offset": 11,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 14,
    "line": 1,
    "lineBreaks": 0,
    "offset": 13,
    "text": "sinh",
    "toString": [Function],
    "type": "SINH",
    "value": "sinh",
  },
  {
    "col": 19,
    "line": 1,
    "lineBreaks": 0,
    "offset": 18,
    "text": "PI",
    "toString": [Function],
    "type": "PI",
    "value": "PI",
  },
]
`;

exports[`tokenizer iterator iterates over the terms from the expression "(.1 + .2) * 10^8 + 4 @nthrt 8e5" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 0,
    "text": "(",
    "toString": [Function],
    "type": "LPAR",
    "value": "(",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": ".",
    "toString": [Function],
    "type": "DOT",
    "value": ".",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "1",
    "toString": [Function],
    "type": "NUM1",
    "value": "1",
  },
  {
    "col": 5,
    "line": 1,
    "lineBreaks": 0,
    "offset": 4,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": ".",
    "toString": [Function],
    "type": "DOT",
    "value": ".",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 7,
    "text": "2",
    "toString": [Function],
    "type": "NUM2",
    "value": "2",
  },
  {
    "col": 9,
    "line": 1,
    "lineBreaks": 0,
    "offset": 8,
    "text": ")",
    "toString": [Function],
    "type": "RPAR",
    "value": ")",
  },
  {
    "col": 11,
    "line": 1,
    "lineBreaks": 0,
    "offset": 10,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 12,
    "text": "1",
    "toString": [Function],
    "type": "NUM1",
    "value": "1",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 13,
    "text": "0",
    "toString": [Function],
    "type": "NUM0",
    "value": "0",
  },
  {
    "col": 15,
    "line": 1,
    "lineBreaks": 0,
    "offset": 14,
    "text": "^",
    "toString": [Function],
    "type": "POW",
    "value": "^",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 15,
    "text": "8",
    "toString": [Function],
    "type": "NUM8",
    "value": "8",
  },
  {
    "col": 18,
    "line": 1,
    "lineBreaks": 0,
    "offset": 17,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 19,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 22,
    "line": 1,
    "lineBreaks": 0,
    "offset": 21,
    "text": "@nthrt",
    "toString": [Function],
    "type": "NTHRT",
    "value": "@nthrt",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 28,
    "text": "8",
    "toString": [Function],
    "type": "NUM8",
    "value": "8",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 29,
    "text": "e",
    "toString": [Function],
    "type": "EXP10",
    "value": "e",
  },
  {
    "col": 3,
    "line": 1,
    "lineBreaks": 0,
    "offset": 30,
    "text": "5",
    "toString": [Function],
    "type": "NUM5",
    "value": "5",
  },
]
`;

exports[`tokenizer tokenize extracts tokens from the expression " 3+4 *$foo + sinh 1" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": "3",
    "toString": [Function],
    "type": "NUM3",
    "value": "3",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "+",
    "toString": [Function],
    "type": "POS",
    "value": "+",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 3,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 6,
    "line": 1,
    "lineBreaks": 0,
    "offset": 5,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 7,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": "$foo + sinh 1",
    "toString": [Function],
    "type": "syntaxError",
    "value": "$foo + sinh 1",
  },
]
`;

exports[`tokenizer tokenize extracts tokens from the expression " 3+4 *$foo + sinh PI" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": "3",
    "toString": [Function],
    "type": "NUM3",
    "value": "3",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "+",
    "toString": [Function],
    "type": "POS",
    "value": "+",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 3,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 6,
    "line": 1,
    "lineBreaks": 0,
    "offset": 5,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 7,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": "$",
    "toString": [Function],
    "type": "DOLLAR",
    "value": "$",
  },
  {
    "col": 8,
    "line": 1,
    "lineBreaks": 0,
    "offset": 7,
    "text": "foo",
    "toString": [Function],
    "type": "FOO",
    "value": "foo",
  },
  {
    "col": 12,
    "line": 1,
    "lineBreaks": 0,
    "offset": 11,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 14,
    "line": 1,
    "lineBreaks": 0,
    "offset": 13,
    "text": "sinh",
    "toString": [Function],
    "type": "SINH",
    "value": "sinh",
  },
  {
    "col": 19,
    "line": 1,
    "lineBreaks": 0,
    "offset": 18,
    "text": "PI",
    "toString": [Function],
    "type": "PI",
    "value": "PI",
  },
]
`;

exports[`tokenizer tokenize extracts tokens from the expression "(.1 + .2) * 10^8 + 4 @nthrt 8e5" 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 0,
    "text": "(",
    "toString": [Function],
    "type": "LPAR",
    "value": "(",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": ".",
    "toString": [Function],
    "type": "DOT",
    "value": ".",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 2,
    "text": "1",
    "toString": [Function],
    "type": "NUM1",
    "value": "1",
  },
  {
    "col": 5,
    "line": 1,
    "lineBreaks": 0,
    "offset": 4,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 6,
    "text": ".",
    "toString": [Function],
    "type": "DOT",
    "value": ".",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 7,
    "text": "2",
    "toString": [Function],
    "type": "NUM2",
    "value": "2",
  },
  {
    "col": 9,
    "line": 1,
    "lineBreaks": 0,
    "offset": 8,
    "text": ")",
    "toString": [Function],
    "type": "RPAR",
    "value": ")",
  },
  {
    "col": 11,
    "line": 1,
    "lineBreaks": 0,
    "offset": 10,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 12,
    "text": "1",
    "toString": [Function],
    "type": "NUM1",
    "value": "1",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 13,
    "text": "0",
    "toString": [Function],
    "type": "NUM0",
    "value": "0",
  },
  {
    "col": 15,
    "line": 1,
    "lineBreaks": 0,
    "offset": 14,
    "text": "^",
    "toString": [Function],
    "type": "POW",
    "value": "^",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 15,
    "text": "8",
    "toString": [Function],
    "type": "NUM8",
    "value": "8",
  },
  {
    "col": 18,
    "line": 1,
    "lineBreaks": 0,
    "offset": 17,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 19,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 22,
    "line": 1,
    "lineBreaks": 0,
    "offset": 21,
    "text": "@nthrt",
    "toString": [Function],
    "type": "NTHRT",
    "value": "@nthrt",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 28,
    "text": "8",
    "toString": [Function],
    "type": "NUM8",
    "value": "8",
  },
  {
    "col": 2,
    "line": 1,
    "lineBreaks": 0,
    "offset": 29,
    "text": "e",
    "toString": [Function],
    "type": "EXP10",
    "value": "e",
  },
  {
    "col": 3,
    "line": 1,
    "lineBreaks": 0,
    "offset": 30,
    "text": "5",
    "toString": [Function],
    "type": "NUM5",
    "value": "5",
  },
]
`;

exports[`tokenizer tokenize recognize all the registered terms 1`] = `
[
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 1,
    "text": "0",
    "toString": [Function],
    "type": "NUM0",
    "value": "0",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 3,
    "text": "1",
    "toString": [Function],
    "type": "NUM1",
    "value": "1",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 5,
    "text": "2",
    "toString": [Function],
    "type": "NUM2",
    "value": "2",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 7,
    "text": "3",
    "toString": [Function],
    "type": "NUM3",
    "value": "3",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 9,
    "text": "4",
    "toString": [Function],
    "type": "NUM4",
    "value": "4",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 11,
    "text": "5",
    "toString": [Function],
    "type": "NUM5",
    "value": "5",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 13,
    "text": "6",
    "toString": [Function],
    "type": "NUM6",
    "value": "6",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 15,
    "text": "7",
    "toString": [Function],
    "type": "NUM7",
    "value": "7",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 17,
    "text": "8",
    "toString": [Function],
    "type": "NUM8",
    "value": "8",
  },
  {
    "col": 1,
    "line": 1,
    "lineBreaks": 0,
    "offset": 19,
    "text": "9",
    "toString": [Function],
    "type": "NUM9",
    "value": "9",
  },
  {
    "col": 22,
    "line": 1,
    "lineBreaks": 0,
    "offset": 21,
    "text": ".",
    "toString": [Function],
    "type": "DOT",
    "value": ".",
  },
  {
    "col": 24,
    "line": 1,
    "lineBreaks": 0,
    "offset": 23,
    "text": "e",
    "toString": [Function],
    "type": "EXP10",
    "value": "e",
  },
  {
    "col": 26,
    "line": 1,
    "lineBreaks": 0,
    "offset": 25,
    "text": "(",
    "toString": [Function],
    "type": "LPAR",
    "value": "(",
  },
  {
    "col": 28,
    "line": 1,
    "lineBreaks": 0,
    "offset": 27,
    "text": ")",
    "toString": [Function],
    "type": "RPAR",
    "value": ")",
  },
  {
    "col": 30,
    "line": 1,
    "lineBreaks": 0,
    "offset": 29,
    "text": ",",
    "toString": [Function],
    "type": "COMMA",
    "value": ",",
  },
  {
    "col": 32,
    "line": 1,
    "lineBreaks": 0,
    "offset": 31,
    "text": "~",
    "toString": [Function],
    "type": "ELLIPSIS",
    "value": "~",
  },
  {
    "col": 34,
    "line": 1,
    "lineBreaks": 0,
    "offset": 33,
    "text": "-",
    "toString": [Function],
    "type": "SUB",
    "value": "-",
  },
  {
    "col": 36,
    "line": 1,
    "lineBreaks": 0,
    "offset": 35,
    "text": "-",
    "toString": [Function],
    "type": "SUB",
    "value": "-",
  },
  {
    "col": 38,
    "line": 1,
    "lineBreaks": 0,
    "offset": 37,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 40,
    "line": 1,
    "lineBreaks": 0,
    "offset": 39,
    "text": "+",
    "toString": [Function],
    "type": "ADD",
    "value": "+",
  },
  {
    "col": 42,
    "line": 1,
    "lineBreaks": 0,
    "offset": 41,
    "text": "*",
    "toString": [Function],
    "type": "MUL",
    "value": "*",
  },
  {
    "col": 44,
    "line": 1,
    "lineBreaks": 0,
    "offset": 43,
    "text": "/",
    "toString": [Function],
    "type": "DIV",
    "value": "/",
  },
  {
    "col": 46,
    "line": 1,
    "lineBreaks": 0,
    "offset": 45,
    "text": "%",
    "toString": [Function],
    "type": "MOD",
    "value": "%",
  },
  {
    "col": 48,
    "line": 1,
    "lineBreaks": 0,
    "offset": 47,
    "text": "^",
    "toString": [Function],
    "type": "POW",
    "value": "^",
  },
  {
    "col": 50,
    "line": 1,
    "lineBreaks": 0,
    "offset": 49,
    "text": "!",
    "toString": [Function],
    "type": "FAC",
    "value": "!",
  },
  {
    "col": 52,
    "line": 1,
    "lineBreaks": 0,
    "offset": 51,
    "text": "=",
    "toString": [Function],
    "type": "ASSIGN",
    "value": "=",
  },
  {
    "col": 54,
    "line": 1,
    "lineBreaks": 0,
    "offset": 53,
    "text": "ans",
    "toString": [Function],
    "type": "ANS",
    "value": "ans",
  },
  {
    "col": 58,
    "line": 1,
    "lineBreaks": 0,
    "offset": 57,
    "text": "PI",
    "toString": [Function],
    "type": "PI",
    "value": "PI",
  },
  {
    "col": 61,
    "line": 1,
    "lineBreaks": 0,
    "offset": 60,
    "text": "E",
    "toString": [Function],
    "type": "E",
    "value": "E",
  },
  {
    "col": 63,
    "line": 1,
    "lineBreaks": 0,
    "offset": 62,
    "text": "NaN",
    "toString": [Function],
    "type": "NAN",
    "value": "NaN",
  },
  {
    "col": 67,
    "line": 1,
    "lineBreaks": 0,
    "offset": 66,
    "text": "Infinity",
    "toString": [Function],
    "type": "INFINITY",
    "value": "Infinity",
  },
  {
    "col": 76,
    "line": 1,
    "lineBreaks": 0,
    "offset": 75,
    "text": "#",
    "toString": [Function],
    "type": "ERROR",
    "value": "#",
  },
  {
    "col": 78,
    "line": 1,
    "lineBreaks": 0,
    "offset": 77,
    "text": "exp",
    "toString": [Function],
    "type": "EXP",
    "value": "exp",
  },
  {
    "col": 82,
    "line": 1,
    "lineBreaks": 0,
    "offset": 81,
    "text": "sqrt",
    "toString": [Function],
    "type": "SQRT",
    "value": "sqrt",
  },
  {
    "col": 87,
    "line": 1,
    "lineBreaks": 0,
    "offset": 86,
    "text": "cbrt",
    "toString": [Function],
    "type": "CBRT",
    "value": "cbrt",
  },
  {
    "col": 92,
    "line": 1,
    "lineBreaks": 0,
    "offset": 91,
    "text": "nthrt",
    "toString": [Function],
    "type": "NTHRT",
    "value": "nthrt",
  },
  {
    "col": 98,
    "line": 1,
    "lineBreaks": 0,
    "offset": 97,
    "text": "floor",
    "toString": [Function],
    "type": "FLOOR",
    "value": "floor",
  },
  {
    "col": 104,
    "line": 1,
    "lineBreaks": 0,
    "offset": 103,
    "text": "ceil",
    "toString": [Function],
    "type": "CEIL",
    "value": "ceil",
  },
  {
    "col": 109,
    "line": 1,
    "lineBreaks": 0,
    "offset": 108,
    "text": "round",
    "toString": [Function],
    "type": "ROUND",
    "value": "round",
  },
  {
    "col": 115,
    "line": 1,
    "lineBreaks": 0,
    "offset": 114,
    "text": "trunc",
    "toString": [Function],
    "type": "TRUNC",
    "value": "trunc",
  },
  {
    "col": 121,
    "line": 1,
    "lineBreaks": 0,
    "offset": 120,
    "text": "sin",
    "toString": [Function],
    "type": "SIN",
    "value": "sin",
  },
  {
    "col": 125,
    "line": 1,
    "lineBreaks": 0,
    "offset": 124,
    "text": "cos",
    "toString": [Function],
    "type": "COS",
    "value": "cos",
  },
  {
    "col": 129,
    "line": 1,
    "lineBreaks": 0,
    "offset": 128,
    "text": "tan",
    "toString": [Function],
    "type": "TAN",
    "value": "tan",
  },
  {
    "col": 133,
    "line": 1,
    "lineBreaks": 0,
    "offset": 132,
    "text": "asin",
    "toString": [Function],
    "type": "ASIN",
    "value": "asin",
  },
  {
    "col": 138,
    "line": 1,
    "lineBreaks": 0,
    "offset": 137,
    "text": "acos",
    "toString": [Function],
    "type": "ACOS",
    "value": "acos",
  },
  {
    "col": 143,
    "line": 1,
    "lineBreaks": 0,
    "offset": 142,
    "text": "atan",
    "toString": [Function],
    "type": "ATAN",
    "value": "atan",
  },
  {
    "col": 148,
    "line": 1,
    "lineBreaks": 0,
    "offset": 147,
    "text": "sinh",
    "toString": [Function],
    "type": "SINH",
    "value": "sinh",
  },
  {
    "col": 153,
    "line": 1,
    "lineBreaks": 0,
    "offset": 152,
    "text": "cosh",
    "toString": [Function],
    "type": "COSH",
    "value": "cosh",
  },
  {
    "col": 158,
    "line": 1,
    "lineBreaks": 0,
    "offset": 157,
    "text": "tanh",
    "toString": [Function],
    "type": "TANH",
    "value": "tanh",
  },
  {
    "col": 163,
    "line": 1,
    "lineBreaks": 0,
    "offset": 162,
    "text": "asinh",
    "toString": [Function],
    "type": "ASINH",
    "value": "asinh",
  },
  {
    "col": 169,
    "line": 1,
    "lineBreaks": 0,
    "offset": 168,
    "text": "acosh",
    "toString": [Function],
    "type": "ACOSH",
    "value": "acosh",
  },
  {
    "col": 175,
    "line": 1,
    "lineBreaks": 0,
    "offset": 174,
    "text": "atanh",
    "toString": [Function],
    "type": "ATANH",
    "value": "atanh",
  },
  {
    "col": 181,
    "line": 1,
    "lineBreaks": 0,
    "offset": 180,
    "text": "ln",
    "toString": [Function],
    "type": "LN",
    "value": "ln",
  },
  {
    "col": 184,
    "line": 1,
    "lineBreaks": 0,
    "offset": 183,
    "text": "log",
    "toString": [Function],
    "type": "LOG",
    "value": "log",
  },
  {
    "col": 188,
    "line": 1,
    "lineBreaks": 0,
    "offset": 187,
    "text": "lg",
    "toString": [Function],
    "type": "LG",
    "value": "lg",
  },
  {
    "col": 191,
    "line": 1,
    "lineBreaks": 0,
    "offset": 190,
    "text": "log10",
    "toString": [Function],
    "type": "LOG10",
    "value": "log10",
  },
  {
    "col": 197,
    "line": 1,
    "lineBreaks": 0,
    "offset": 196,
    "text": "abs",
    "toString": [Function],
    "type": "ABS",
    "value": "abs",
  },
  {
    "col": 201,
    "line": 1,
    "lineBreaks": 0,
    "offset": 200,
    "text": "random",
    "toString": [Function],
    "type": "RAND",
    "value": "random",
  },
]
`;
